<File '': {'Level': Compound({'Status': String('full'), 'zPos': Int(0), 'LastUpdate': Long(2509), 'Biomes': IntArray([Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(0), Int(0), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16), Int(16)]), 'InhabitedTime': Long(1718), 'xPos': Int(1), 'Heightmaps': Compound({'OCEAN_FLOOR': LongArray([Long(1101028755867204670), Long(1137128059338260031), Long(1119078407602994751), Long(1137128059337997374), Long(1137128059338260031), Long(1137092874966171199), Long(1137128059472477759), Long(1137128059338260031), Long(1137128059338260031), Long(1155142457847742016), Long(1137128059338260031), Long(1137128059338784319), Long(1137128059338260031), Long(1137128196911431231), Long(1155177642219830847), Long(1137128128191955008), Long(1191171254866705983), Long(1173192040729575488), Long(1137127990484303424), Long(1155142526567481407), Long(1119078407737475136), Long(1137163312564043327), Long(1119113729682473023), Long(1155177710939044926), Long(1155177711073525312), Long(1137127990484302911), Long(1155177710939570240), Long(1119078407602995264), Long(1155142526567481407), Long(1119078476456951871), Long(1137163312564042814), Long(1137163243844829247), Long(1155177642085350462), Long(1137233681308483137), Long(1137092806112214591), Long(1137163312430088255), Long(8472264256)]), 'MOTION_BLOCKING_NO_LEAVES': LongArray([Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260031), Long(1137128059472477759), Long(1137128059338260031), Long(1137128059338260031), Long(1155142457847742016), Long(1137128059338260031), Long(1137128059338784319), Long(1137128059338260031), Long(1137128196911431231), Long(1155177642219830847), Long(1137128128191955008), Long(1191171254866705983), Long(1173192040729575488), Long(1137128059338260032), Long(1155142526701699135), Long(1137128059338522688), Long(1137163312564043327), Long(1137128128192217151), Long(1155177710939307583), Long(1155177711073525312), Long(1137128059338260031), Long(1155177710939570240), Long(1137128059338260544), Long(1155142526701699135), Long(1137128059338522688), Long(1137163312564043327), Long(1137163243844829247), Long(1155177642219830847), Long(1137233681308483137), Long(1137128059338260031), Long(1137163312430088255), Long(8472264256)]), 'MOTION_BLOCKING': LongArray([Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260031), Long(1137128059472477759), Long(1137128059338260031), Long(1137128059338260031), Long(1155142457847742016), Long(1137128059338260031), Long(1137128059338784319), Long(1137128059338260031), Long(1137128196911431231), Long(1155177642219830847), Long(1137128128191955008), Long(1191171254866705983), Long(1173192040729575488), Long(1137128059338260032), Long(1155142526701699135), Long(1137128059338522688), Long(1137163312564043327), Long(1137128128192217151), Long(1155177710939307583), Long(1155177711073525312), Long(1137128059338260031), Long(1155177710939570240), Long(1137128059338260544), Long(1155142526701699135), Long(1137128059338522688), Long(1137163312564043327), Long(1137163243844829247), Long(1155177642219830847), Long(1137233681308483137), Long(1137128059338260031), Long(1137163312430088255), Long(8472264256)]), 'WORLD_SURFACE': LongArray([Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260031), Long(1137128059338260034), Long(1137128059472477759), Long(1137128059338260031), Long(1137128059338260031), Long(1173156856357224000), Long(1137128059338260031), Long(1137128059338784319), Long(1137128059338260031), Long(1137128196911431231), Long(1155177642219830847), Long(1137128128191955008), Long(1209185653376187967), Long(1173227225101926976), Long(1137198428082437696), Long(1155142595421438015), Long(1137128059338523201), Long(1137198565655608895), Long(1137128128326435391), Long(1173192109448789567), Long(1155212964165090881), Long(1137128059338260031), Long(1173227362540618304), Long(1137128059338260545), Long(1173156993930919999), Long(1137128059338523200), Long(1137198565655608895), Long(1137163243845091903), Long(1173192040729312831), Long(1137268865815051841), Long(1137128059338260031), Long(1137163312430088255), Long(8472264256)])}), 'TileEntities': List[Compound]([Compound({'keepPacked': Byte(0), 'x': Int(29), 'y': Int(63), 'z': Int(2), 'Items': List([]), 'id': String('minecraft:campfire'), 'CookingTimes': IntArray([Int(0), Int(0), Int(0), Int(0)]), 'CookingTotalTimes': IntArray([Int(0), Int(0), Int(0), Int(0)])})]), 'Entities': List([]), 'isLightOn': Byte(1), 'TileTicks': List([]), 'Sections': List[Compound]([Compound({'Y': Byte(-1)}), Compound({'BlockStates': LongArray([Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(9570149224943616), Long(73031221264), Long(2305843009231585536), Long(9007203818209536), Long(2449958266076136195), Long(144116305841094704), Long(299136955990017), Long(68719738896), Long(1224979102956519425), Long(72340168816722176), Long(1157442696420327424), Long(1152922608413507584), Long(256), Long(1157425104235266049), Long(72057662757429264), Long(68736319488), Long(1233987397680631809), Long(1306046091245981697), Long(9043556422390032), Long(153123559857786896), Long(2305860619720736773), Long(9288692485341189), Long(1168302670848), Long(1157707684091544576), Long(1229482702919782401), Long(1229764246263627777), Long(72076358833930240), Long(1157426208326029584), Long(4522291325112577), Long(1157706579228755456), Long(1224980271170938385), Long(72057594037993472), Long(76579958394257681), Long(1229482767261171728), Long(72638140473413649), Long(1225260578201735429), Long(1152940472323556688), Long(76562310428360773), Long(76578804176519232), Long(72357834867605568), Long(1229764177627709521), Long(72076359018828033), Long(1229501463341826320), Long(1229782869511049232), Long(76579954100343057), Long(76579958663675904), Long(18764712120593), Long(1153204152127459344), Long(1229782938247237905), Long(8142790769763221761), Long(1224997863626379281), Long(1239353087437635925), Long(1382887747131347029), Long(229983834714948613), Long(1229781839527298053), Long(1229782933688308817), Long(72357765297755409), Long(1229765277341012241), Long(299067449086225), Long(76579958663680016), Long(1230064413224014097), Long(1225298030316491025), Long(1157744100331487505), Long(1229766514292363537), Long(1230345888200724753), Long(8156917299468636433), Long(8156924308855263505), Long(1383475284917948689), Long(1383468275531321685), Long(1382905325577900373), Long(1229782938247320849), Long(1229782938247320849), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1234586043124093201), Long(1234587142635720977), Long(1234586773268533521), Long(1230083177936130321), Long(1230083177936130321), Long(1230345888200724753), Long(1230381072572813585), Long(1239360096842092817), Long(1239360096842092817), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1306643199075356945), Long(1306644736673648913), Long(1306644736673648913), Long(1234586777563500817), Long(1234586777563500817), Long(1230083178204565777), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1811028765272248593), Long(-7412324580002295535), Long(2459565871913308433), Long(2459565871913308433), Long(2459565876208275729), Long(1270615574582464785), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1825383989091832081), Long(-7397917679018766063), Long(2473972704052580625), Long(2460463004682096913), Long(2459618648471441681), Long(2459565871913308433), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1247797336763076881), Long(1537153612815339793), Long(1537223981559517457), Long(2690149884212875537), Long(2690149884212875537), Long(2473977102099091729), Long(2473977376976998673), Long(2460466303216980241), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1247797336863740177), Long(1537223981666472210), Long(1537228379606028562), Long(1537228379606028561), Long(2690149884212875537), Long(2473977376976998673), Long(2473977376976998673), Long(1230983879829033233), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229786442940616978), Long(5842369662862954770), Long(5855880255586242834), Long(6072053037693735188), Long(1460363720832127252), Long(1460381312917508370), Long(1537228379606028562), Long(1537228379606028561), Long(1248998003454316817), Long(1248998278332223761), Long(1230984085981171985), Long(1536027712908497169), Long(1229782938247303441), Long(1229782938247303441), Long(1229782938247303441), Long(1229786442940616977), Long(1229839232383652114), Long(5842369675747856658), Long(5855880461744675490), Long(6072053037693737636), Long(4919128234552044196), Long(4919128234552044194), Long(4919075457993871634), Long(2455958305543100274), Long(2460466303216981777), Long(2460466303216980241), Long(2459336005263626513), Long(6148839631242727697), Long(1536027712908497169), Long(1229782938247303441), Long(1229782938247303441), Long(1229786442940616977), Long(1229839232383652114), Long(1230683657313784226), Long(1244194452471356066), Long(1460367019836775074), Long(4919128234552044194), Long(4919128234552044194), Long(4919075457993871634), Long(2459265636519450481), Long(2459265636519448945), Long(2459265636519448849), Long(2459265636519448849), Long(6148839631242727697), Long(1536027712908497169), Long(1229782938247303441), Long(1229782938247303441), Long(1277633684288114961), Long(1998389051221152026), Long(1996295581081866666), Long(1244194246315154090), Long(1460367019839011498), Long(2613285225338313386), Long(2613232448780177681), Long(2454762036892078353), Long(2459265636519448849), Long(2459265636519448849), Long(2459265636519448849), Long(2459265636519448849), Long(1459466519243233553), Long(1229782938247338257), Long(1229794620558348561), Long(1277821331409277201), Long(1998397271788556561), Long(-4919131798802198255), Long(-4919143481113243366), Long(-4919319402973556454), Long(1229782938247434657), Long(1229782938247303441), Long(2382704442854150417), Long(2454762036892078353), Long(2454762036892078353), Long(2459265636519448849), Long(2459265636519448849), Long(2459265636519448849)]), 'Palette': List[Compound]([Compound({'Name': String('minecraft:bedrock')}), Compound({'Name': String('minecraft:stone')}), Compound({'Name': String('minecraft:diorite')}), Compound({'Name': String('minecraft:coal_ore')}), Compound({'Name': String('minecraft:dirt')}), Compound({'Name': String('minecraft:andesite')}), Compound({'Name': String('minecraft:lapis_ore')}), Compound({'Properties': Compound({'lit': String('false')}), 'Name': String('minecraft:redstone_ore')}), Compound({'Name': String('minecraft:iron_ore')}), Compound({'Name': String('minecraft:gold_ore')}), Compound({'Name': String('minecraft:granite')}), Compound({'Name': String('minecraft:gravel')})]), 'Y': Byte(0)}), Compound({'BlockStates': LongArray([Long(153122387330601216), Long(4352), Long(56294136348672), Long(14411517948592128), Long(230584300062375936), Long(3689348800998014976), Long(3689345296304701508), Long(3689292519746569284), Long(1092), Long(17476), Long(279552), Long(279552), Long(0), Long(0), Long(0), Long(0), Long(4096), Long(0), Long(5764663817170583552), Long(14411517948592128), Long(230584300062375936), Long(230584287177474116), Long(230580782484161604), Long(844424930133060), Long(1092), Long(279620), Long(279616), Long(279552), Long(0), Long(0), Long(3674937295934324736), Long(3701958893698547712), Long(5764607523034234880), Long(5764607523034234880), Long(6124895493223874560), Long(5764611027727548416), Long(5779019028097925120), Long(5778962746846478404), Long(5765451947964367940), Long(1092), Long(1092), Long(17476), Long(17408), Long(16384), Long(13510798882111488), Long(3688448094816436224), Long(3688448094816436224), Long(3688448094816436224), Long(5764607523034235972), Long(6125026335107579904), Long(6125026335107579904), Long(5764607523034234880), Long(5764607523034234880), Long(5764607523034234884), Long(68), Long(1092), Long(1092), Long(68), Long(0), Long(13510798882111488), Long(230528005926027264), Long(3689292519746568192), Long(2535526590209589248), Long(2535526590209589248), Long(5764607523034235972), Long(5764738364917940224), Long(5764738364922134528), Long(5764607523034234880), Long(6124895493223874560), Long(6124895493223874560), Long(360287970189639680), Long(4), Long(0), Long(0), Long(0), Long(124780544), Long(230528006043467776), Long(2536371015139721216), Long(2535526590209589248), Long(2463468996171661312), Long(1145307136), Long(71565312), Long(5764607523105816576), Long(5764607523105816576), Long(6124895493228331008), Long(6124895493223874560), Long(360287970189639680), Long(0), Long(0), Long(0), Long(0), Long(124780544), Long(117470976), Long(2305843009213724416), Long(2305843009213693952), Long(2449958710387146752), Long(1181114368), Long(1181106176), Long(107364352), Long(5764607523105816576), Long(5764607523038691328), Long(5764607523034234880), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(30464), Long(30464), Long(2305843009213693952), Long(2305843041274953728), Long(1718126080), Long(1717985280), Long(27487764480), Long(27487764480), Long(27380416512), Long(0), Long(0), Long(0), Long(511101108224), Long(-9223371525753667584), Long(-8646911284551352320), Long(-8646911284551351296), Long(17472), Long(1024), Long(1088), Long(1092), Long(27487929856), Long(27487790592), Long(27487789056), Long(439804624896), Long(439797940224), Long(438086664192), Long(0), Long(0), Long(511101108224), Long(-8791025961526099968), Long(-8618200836926847936), Long(-8609193637672106944), Long(7530018576963486784), Long(17472), Long(17476), Long(17476), Long(3689292547234358784), Long(3688448122304225280), Long(27487764480), Long(439804624896), Long(439797940224), Long(897639574930688), Long(14408000370378064), Long(844424930133328), Long(80), Long(7378585039493136384), Long(-8618095283810581440), Long(-8609088084555840448), Long(7387592238747894848), Long(17472), Long(17476), Long(17476), Long(3689345323792465920), Long(3689292519853916160), Long(3674937297652285440), Long(3458764515532166400), Long(3689345296305050960), Long(3689348594839934293), Long(3689348800998036821), Long(230584081019065685), Long(1365), Long(7378585039493136469), Long(7378690592609402880), Long(7378690592609403904), Long(7378585039493153856), Long(1024), Long(1088), Long(1500833371915332), Long(3689345296304701440), Long(3689292519746895872), Long(3674937776971011328), Long(3458764513827251536), Long(3689345296311412048), Long(3689348594839999829), Long(3689348800998364501), Long(3689348594839606613), Long(1365), Long(7349874591868649557), Long(7378585039493136384), Long(7378585039493136384), Long(7349874591868649472), Long(0), Long(1407374883553280), Long(1500833371914240), Long(3689292519752138854), Long(3688448094822032998), Long(511107819110), Long(511107819104), Long(3689292519853942352), Long(3689348594946958677), Long(3689348594940597589), Long(230580782484182357), Long(1365), Long(0), Long(0), Long(511101108224), Long(511101108224), Long(0), Long(1407374883553280), Long(1500833371914240), Long(329318), Long(5596774), Long(6710886), Long(107374176), Long(107374160), Long(3458764513927914832), Long(106976592), Long(1360), Long(0), Long(0), Long(0), Long(511101108224), Long(511101108224), Long(0), Long(0), Long(0), Long(1638), Long(26214), Long(419430), Long(2093470145996384), Long(2093470145996288), Long(6709248), Long(0), Long(0), Long(0), Long(0), Long(5864056422400), Long(93824986644480), Long(24019197923164160), Long(24019175106150400), Long(0), Long(511101108224), Long(0), Long(96), Long(1632), Long(417792), Long(393216), Long(0), Long(0), Long(0), Long(0), Long(22900899840), Long(93824991887360), Long(24019198012293120), Long(384307168196689920), Long(384307168112803840), Long(0), Long(30064771072)]), 'Palette': List[Compound]([Compound({'Name': String('minecraft:stone')}), Compound({'Name': String('minecraft:gold_ore')}), Compound({'Name': String('minecraft:dirt')}), Compound({'Name': String('minecraft:gravel')}), Compound({'Name': String('minecraft:diorite')}), Compound({'Name': String('minecraft:granite')}), Compound({'Name': String('minecraft:andesite')}), Compound({'Name': String('minecraft:iron_ore')}), Compound({'Name': String('minecraft:coal_ore')})]), 'Y': Byte(1)}), Compound({'BlockStates': LongArray([Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(8875147264), Long(18769561780224), Long(4803844165861376), Long(76861438203854848), Long(76861433640456192), Long(73300774912), Long(4581294080), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(3), Long(8589934595), Long(1177374687235), Long(18769561780227), Long(1157725348789555456), Long(1157725348772778256), Long(1173080838400), Long(1172812402688), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(3), Long(3), Long(3), Long(3), Long(3), Long(9127854083), Long(1152921513751548163), Long(1152921582471024915), Long(1172812402944), Long(1172812402688), Long(0), Long(0), Long(4), Long(4), Long(0), Long(0), Long(3), Long(3), Long(3), Long(3), Long(3), Long(3), Long(17891331), Long(4581298243), Long(73300774980), Long(348178677764), Long(0), Long(0), Long(4), Long(4), Long(0), Long(0), Long(0), Long(0), Long(3), Long(67), Long(67), Long(67), Long(68), Long(68), Long(68), Long(343597383748), Long(4672924418048), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(4), Long(68), Long(25769803844), Long(68), Long(68), Long(6917529055021498436), Long(27380416580), Long(68), Long(75058848464896), Long(4672924418048), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(4), Long(439697276932), Long(25769803780), Long(7349874591868649476), Long(7349874619249066052), Long(27380416580), Long(4), Long(75041668595712), Long(4672924418048), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(438086664192), Long(412316860416), Long(432345564227567616), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(412316860416), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(100663296), Long(0), Long(0), Long(3674937295937680179), Long(3689292519746569011), Long(3688448094816436224), Long(3674937295934324736), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(27380416512), Long(1610612736), Long(0), Long(0), Long(3689292519749923635), Long(3689345296304714547), Long(3689292519746569011), Long(3688448094816436224), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(25769803776), Long(0), Long(0), Long(0), Long(3689292521628971827), Long(3689345296304714547), Long(3689292519746581299), Long(3688448094816436224), Long(0), Long(0), Long(28710447624486912), Long(28710447624486912), Long(27021597764222976), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(3674937332173124403), Long(7364229815680906035), Long(7363385390750761779), Long(3674937295934324736), Long(1152921504606846976), Long(0), Long(28710447624486912), Long(28710447624486912), Long(27021597764222976), Long(0), Long(0), Long(7035156430848), Long(438086664192), Long(2701500069445632), Long(2701500069445632), Long(2701500069445632), Long(-6148914691810786512), Long(-6148914692220779725), Long(-6148914694099828736), Long(-6148914694099828736), Long(-6148914737049501696), Long(-6917529027641081856), Long(1152921504606846976), Long(1152921504606846976), Long(0), Long(0), Long(0), Long(7035156430848), Long(168663365713920), Long(2701500069445632), Long(2701500069445632), Long(43233896715780096), Long(-6148914691273916416), Long(-6148914692220780544), Long(-6148914692220780544), Long(-6148914692220780544), Long(-6148914694099828736), Long(-6148926419360546816), Long(-6196953087261802496), Long(-6917529027641081856), Long(-6917529027641081856), Long(-6917529027641081856), Long(-6917529027641081856), Long(-6917529027641081856), Long(-6917360802362032128), Long(-6914827527571636224), Long(-6194251587192356864), Long(-6149215590918651904)]), 'Palette': List[Compound]([Compound({'Name': String('minecraft:stone')}), Compound({'Name': String('minecraft:granite')}), Compound({'Name': String('minecraft:coal_ore')}), Compound({'Name': String('minecraft:diorite')}), Compound({'Name': String('minecraft:andesite')}), Compound({'Name': String('minecraft:dirt')}), Compound({'Name': String('minecraft:iron_ore')}), Compound({'Name': String('minecraft:sandstone')}), Compound({'Name': String('minecraft:sand')}), Compound({'Name': String('minecraft:gravel')}), Compound({'Properties': Compound({'level': String('0')}), 'Name': String('minecraft:water')})]), 'Y': Byte(2)}), Compound({'BlockStates': LongArray([Long(111573047748625441), Long(137114633009990755), Long(37217475492940899), Long(111573048832918561), Long(111573046616188729), Long(37218255790771299), Long(929774626642431075), Long(111573048832853049), Long(37191016303617825), Long(37218229190495331), Long(37191087144600609), Long(111500410129253409), Long(37191016277640225), Long(37191016277707809), Long(37191087144600609), Long(111500410129253409), Long(37191016277640225), Long(37191016277707809), Long(37191087144698913), Long(111570885173871649), Long(145277407334532129), Long(111536698308004963), Long(37191087213874275), Long(111573048832923841), Long(111573052152645433), Long(109249461549632611), Long(929774626642431075), Long(111573048832918585), Long(111572978727970617), Long(38062680720903267), Long(928903813433232417), Long(111570778873431865), Long(37191016277640225), Long(37191016277707809), Long(37191087278818337), Long(111641147617608737), Long(37191016277640225), Long(37191016277707809), Long(37191087144600609), Long(111570778873431073), Long(37191016277640225), Long(37191016277707875), Long(185809874917032993), Long(111573048832920642), Long(111573048936831009), Long(111682002177068131), Long(929774626642431075), Long(111573048832923841), Long(111573046642140985), Long(38062680720903267), Long(929774626642431075), Long(111573048834950969), Long(37191017108923425), Long(37191016277707875), Long(37191087211709473), Long(111570778873431073), Long(181306204353496097), Long(37191016277707873), Long(37191087211709473), Long(111570778873431073), Long(37191016277641057), Long(37191016277707875), Long(37191087213937697), Long(111573046616163361), Long(111573048831841313), Long(111681972355566691), Long(217361460587760739), Long(111573048832920774), Long(111573048931444537), Long(111527649642384483), Long(929774626642431075), Long(111573048832918585), Long(111572977922664225), Long(37218229190495331), Long(37191087213874209), Long(111572977896686625), Long(181306204353496097), Long(37191016277707875), Long(37191087213937697), Long(111573115335640097), Long(37191016277640225), Long(37191017150123107), Long(37191087213806625), Long(111573046616163361), Long(109248610315568161), Long(111573013330234467), Long(181306275289730147), Long(111573048832920678), Long(111573048835998753), Long(111676331989765219), Long(37191087213874275), Long(111573048832920609), Long(111573046616163361), Long(109248610315635811), Long(37191087213874275), Long(111573048832853025), Long(111504808175764513), Long(37191016277707875), Long(37191087213872161), Long(111573046750381089), Long(109248610315568161), Long(37191016277707875), Long(37191087213872161), Long(111573046616163361), Long(111500410129253435), Long(37191016277707875), Long(110374581158644897), Long(111573048832920675), Long(111573048832984097), Long(111572977896754275), Long(37191087213874275), Long(111573048832920673), Long(111573048830755873), Long(111500410129321059), Long(37191087213874275), Long(111573048832918561), Long(111573072089389254), Long(187117300646775907), Long(223145991261490275), Long(111573048833611974), Long(111575319733016609), Long(37191016277707875), Long(37191087213874273), Long(111573048902059041), Long(111500410129253409), Long(37191016277707875), Long(37191087213874277), Long(111573048830755873), Long(111573048832920737), Long(111573050911198307), Long(109248681251802211), Long(111573048832920675), Long(111573048832853025), Long(111572977896754275), Long(37191087213874275), Long(111573048832920673), Long(111573049562456097), Long(135981901056937059), Long(223144891749862499), Long(111573048832924506), Long(111573052158056645), Long(187117300613221475), Long(37191087213874275), Long(111573048832853025), Long(111572977896686625), Long(37191016277707875), Long(37191087213874275), Long(111573048832853025), Long(111572977896690721), Long(111573048835017827), Long(111500481065487459), Long(111573048832920675), Long(111573048832918693), Long(111572977896754275), Long(37191087213874275), Long(111573048832920675), Long(111573048831600801), Long(111599130724371555), Long(943721931640769635), Long(111573048832921434), Long(111573049629545669), Long(115059672248061027), Long(223110806889401443), Long(111573048832923846), Long(111573046616163361), Long(109389352098958435), Long(181447012778085475), Long(111573048832918693), Long(111573046620357793), Long(109248614744820835), Long(111573048832920675), Long(109321249019235427), Long(111573048832920677), Long(111573046754575395), Long(37191188076399715), Long(217337271331949667), Long(111573048855027745), Long(111526584872109091), Long(185950612405455971), Long(111573048832921370), Long(111573049540417734), Long(111682005779975267), Long(187080910358809699), Long(111573048832920774), Long(111573048902227105), Long(111681972355566691), Long(221838671936064611), Long(111573048832918694), Long(111573046754711713), Long(109253184590023779), Long(41835424329600099), Long(111573048832918561), Long(37263654981307491), Long(111573051049542689), Long(185954939515733091), Long(37191016279805089), Long(37191158170654488), Long(37357185039107105), Long(207347037745742881), Long(37191016277776152), Long(37196209032696993), Long(891929507350479905), Long(218497185163019320), Long(109248610384905414), Long(183630572073158722), Long(109393781323828385), Long(74563487506992227), Long(109389485312152774), Long(185882371886745831), Long(185954974989222950), Long(74387666582574243), Long(41694753346061477), Long(185952882365892674), Long(111573048798250017), Long(74382883763029219), Long(966938048731351106), Long(37197750920713282), Long(185976625601479713), Long(182492577399866401), Long(37191016277640357), Long(37191158150108226), Long(185955078063031329), Long(74381997087163429), Long(37191193450012837), Long(223144962686126146), Long(41839786907960353), Long(74387632223851685), Long(185956181973566626), Long(185809945749424359), Long(41730935429829797), Long(74387494818452645), Long(37336293684974658), Long(181310602434644039), Long(185846123332670662), Long(74382134699267233), Long(260337113943313507), Long(260336936602896450), Long(74382032555449575), Long(74382209895865575), Long(260337113943312450), Long(260337108401588290), Long(74382032555252967), Long(74382003737435367), Long(37408932383230018), Long(260331439044757570), Long(74382032555252967), Long(74382001589951714), Long(74387530113419330), Long(74382032555280455), Long(74382032728393797), Long(74563420835350594), Long(41734233791727682), Long(74382032555280455), Long(74382032560493634), Long(74382001416767554), Long(187112760727898178), Long(148761795151071298), Long(74382032555449476), Long(74382209892618306), Long(260337110716844098), Long(260331439044757570), Long(74382032555449575), Long(74382209895865570), Long(260337113943312450), Long(260331439044757570), Long(74382032555449575), Long(74382209895865570), Long(74563629309036610), Long(74382032555280450), Long(74382032557377607), Long(74454600322713666), Long(74382032555280450), Long(74382032555280516), Long(74382032557377602), Long(74384231578536002), Long(74382032555280450), Long(74382032555280450), Long(76459045453629506), Long(74382209791955074), Long(260333708934973506), Long(256953739324229698), Long(74382032555449575), Long(74382209895865570), Long(260337113938069570), Long(260336936602896450), Long(74382032555449575), Long(74382209895865570), Long(260337113938069570), Long(260331439044757570), Long(74382032555280615), Long(74384231583778882), Long(74382032555280450), Long(74382032555280516), Long(74382032624486466), Long(74384231578536002), Long(74382032555280450), Long(74382032555280452), Long(74382032555280450), Long(111573013364803650), Long(298514256305556579), Long(154590341785291874), Long(74382032555484425), Long(334719112105464099), Long(334719145424783657), Long(298690349244917033), Long(334472615141057801), Long(74382280832098600), Long(297528129141049410), Long(334647500833097794), Long(146439627701756135), Long(75544216519025895), Long(74564731040565314), Long(262655877559979107), Long(148691461874977000), Long(111573013537988903), Long(74387708594753602), Long(260409575237323875), Long(256848221676051522), Long(111573013572623625), Long(74387530120759362), Long(0), Long(0), Long(1008806316530991104), Long(774056185954304), Long(0), Long(633318697926656), Long(377957122048), Long(409827566090715136), Long(15145119837585408), Long(632755747645555150), Long(1008806332888777232), Long(17469694117692416), Long(576478912498892800), Long(596058447556918787), Long(16660168720), Long(17469607699301376), Long(126118502581927936), Long(595073285138416112), Long(13974913024), Long(20324322361888), Long(24383513960644608), Long(13)]), 'Palette': List[Compound]([Compound({'Name': String('minecraft:air')}), Compound({'Name': String('minecraft:stone')}), Compound({'Name': String('minecraft:sand')}), Compound({'Properties': Compound({'level': String('0')}), 'Name': String('minecraft:water')}), Compound({'Name': String('minecraft:gravel')}), Compound({'Name': String('minecraft:sandstone')}), Compound({'Name': String('minecraft:andesite')}), Compound({'Name': String('minecraft:dirt')}), Compound({'Properties': Compound({'snowy': String('false')}), 'Name': String('minecraft:grass_block')}), Compound({'Name': String('minecraft:grass_path')}), Compound({'Properties': Compound({'half': String('bottom'), 'waterlogged': String('false'), 'shape': String('straight'), 'facing': String('south')}), 'Name': String('minecraft:cobblestone_stairs')}), Compound({'Name': String('minecraft:cobblestone')}), Compound({'Properties': Compound({'half': String('bottom'), 'waterlogged': String('false'), 'shape': String('straight'), 'facing': String('east')}), 'Name': String('minecraft:cobblestone_stairs')}), Compound({'Name': String('minecraft:pumpkin')}), Compound({'Properties': Compound({'half': String('bottom'), 'waterlogged': String('false'), 'powered': String('false'), 'facing': String('north'), 'open': String('true')}), 'Name': String('minecraft:spruce_trapdoor')}), Compound({'Properties': Compound({'half': String('bottom'), 'waterlogged': String('false'), 'powered': String('false'), 'facing': String('east'), 'open': String('true')}), 'Name': String('minecraft:spruce_trapdoor')}), Compound({'Properties': Compound({'moisture': String('7')}), 'Name': String('minecraft:farmland')}), Compound({'Properties': Compound({'half': String('bottom'), 'waterlogged': String('false'), 'powered': String('false'), 'facing': String('west'), 'open': String('true')}), 'Name': String('minecraft:spruce_trapdoor')}), Compound({'Properties': Compound({'east': String('none'), 'waterlogged': String('false'), 'south': String('none'), 'north': String('none'), 'west': String('none'), 'up': String('true')}), 'Name': String('minecraft:cobblestone_wall')}), Compound({'Properties': Compound({'level': String('0')}), 'Name': String('minecraft:composter')}), Compound({'Properties': Compound({'half': String('bottom'), 'waterlogged': String('false'), 'shape': String('straight'), 'facing': String('west')}), 'Name': String('minecraft:cobblestone_stairs')}), Compound({'Properties': Compound({'half': String('bottom'), 'waterlogged': String('false'), 'powered': String('false'), 'facing': String('south'), 'open': String('true')}), 'Name': String('minecraft:spruce_trapdoor')}), Compound({'Properties': Compound({'waterlogged': String('false'), 'signal_fire': String('false'), 'lit': String('true'), 'facing': String('east')}), 'Name': String('minecraft:campfire')}), Compound({'Name': String('minecraft:spruce_planks')}), Compound({'Name': String('minecraft:granite')}), Compound({'Name': String('minecraft:diorite')}), Compound({'Name': String('minecraft:coal_ore')}), Compound({'Name': String('minecraft:iron_ore')}), Compound({'Properties': Compound({'age': String('0')}), 'Name': String('minecraft:sugar_cane')}), Compound({'Name': String('minecraft:seagrass')})]), 'SkyLight': ByteArray([Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(32), Byte(18), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(51), Byte(35), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(32), Byte(18), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(64), Byte(68), Byte(52), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(51), Byte(35), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(34), Byte(18), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(17), Byte(17), Byte(33), Byte(0), Byte(85), Byte(85), Byte(69), Byte(52), Byte(18), Byte(0), Byte(0), Byte(0), Byte(64), Byte(68), Byte(52), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(48), Byte(51), Byte(35), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(34), Byte(18), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(17), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(0), Byte(0), Byte(0), Byte(0), Byte(17), Byte(17), Byte(17), Byte(50), Byte(0), Byte(0), Byte(0), Byte(0), Byte(34), Byte(34), Byte(34), Byte(50), Byte(96), Byte(102), Byte(102), Byte(86), Byte(69), Byte(35), Byte(1), Byte(0), Byte(0), Byte(85), Byte(85), Byte(69), Byte(52), Byte(18), Byte(0), Byte(0), Byte(0), Byte(64), Byte(68), Byte(52), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(51), Byte(35), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(34), Byte(18), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(67), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(67), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(67), Byte(0), Byte(0), Byte(0), Byte(16), Byte(17), Byte(17), Byte(33), Byte(67), Byte(0), Byte(0), Byte(0), Byte(32), Byte(34), Byte(34), Byte(34), Byte(67), Byte(0), Byte(0), Byte(0), Byte(48), Byte(51), Byte(51), Byte(51), Byte(67), Byte(119), Byte(119), Byte(119), Byte(103), Byte(86), Byte(52), Byte(18), Byte(0), Byte(96), Byte(102), Byte(102), Byte(86), Byte(69), Byte(35), Byte(1), Byte(0), Byte(0), Byte(80), Byte(85), Byte(69), Byte(52), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(68), Byte(52), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(48), Byte(35), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(18), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(67), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(84), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(84), Byte(0), Byte(0), Byte(0), Byte(16), Byte(17), Byte(17), Byte(50), Byte(84), Byte(0), Byte(0), Byte(0), Byte(32), Byte(34), Byte(34), Byte(50), Byte(84), Byte(0), Byte(0), Byte(0), Byte(48), Byte(51), Byte(51), Byte(51), Byte(84), Byte(0), Byte(0), Byte(0), Byte(64), Byte(68), Byte(68), Byte(68), Byte(84), Byte(-120), Byte(-120), Byte(-120), Byte(120), Byte(103), Byte(0), Byte(0), Byte(0), Byte(0), Byte(112), Byte(119), Byte(103), Byte(86), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(86), Byte(5), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(64), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(84), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(101), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(96), Byte(0), Byte(0), Byte(0), Byte(0), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(3), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(4), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(5), Byte(0), Byte(0), Byte(0), Byte(0), Byte(-103), Byte(-103), Byte(-119), Byte(8), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(-86), Byte(10), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(-35), Byte(-35), Byte(13), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(-18), Byte(-18), Byte(-18), Byte(14), Byte(0), Byte(15), Byte(15), Byte(15), Byte(-32), Byte(-18), Byte(-18), Byte(-18), Byte(-16), Byte(15), Byte(15), Byte(15), Byte(0), Byte(0), Byte(0), Byte(0), Byte(-2), Byte(-16), Byte(15), Byte(15), Byte(-1), Byte(-1), Byte(-1), Byte(0), Byte(-1), Byte(-16), Byte(-1), Byte(-17), Byte(-1), Byte(-1), Byte(15), Byte(-1), Byte(-1), Byte(15), Byte(15), Byte(15), Byte(15), Byte(15), Byte(15), Byte(-1), Byte(-16), Byte(-16), Byte(-1), Byte(-34), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(-1), Byte(0), Byte(0), Byte(-18), Byte(14), Byte(0), Byte(0), Byte(0), Byte(15), Byte(0), Byte(0), Byte(-18), Byte(14), Byte(0), Byte(0), Byte(-16), Byte(15), Byte(0), Byte(0), Byte(-18), Byte(-18), Byte(0), Byte(0), Byte(-16), Byte(15), Byte(0), Byte(0), Byte(-18), Byte(-18), Byte(0), Byte(0), Byte(-16), Byte(0), Byte(0), Byte(0), Byte(-18), Byte(-18), Byte(0), Byte(0), Byte(-16), Byte(0), Byte(0), Byte(0), Byte(-18), Byte(-18), Byte(0), Byte(0), Byte(-1), Byte(0), Byte(0), Byte(0), Byte(-18), Byte(-18), Byte(0), Byte(0), Byte(15), Byte(0), Byte(0), Byte(0), Byte(-18), Byte(-18), Byte(0), Byte(0), Byte(15), Byte(0), Byte(0), Byte(0), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(15), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(15), Byte(-1), Byte(-1), Byte(-1), Byte(15), Byte(-1), Byte(-16), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(15), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-2), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-2), Byte(-1), Byte(-1), Byte(-1), Byte(15), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-17), Byte(-1), Byte(-17), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-16), Byte(-1), Byte(-1), Byte(-1), Byte(15), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-16), Byte(-1)]), 'Y': Byte(3), 'BlockLight': ByteArray([Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(50), Byte(2), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(84), Byte(118), Byte(6), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(67), Byte(101), Byte(-121), Byte(7), Byte(0), Byte(9), Byte(11), Byte(11), Byte(80), Byte(118), Byte(-104), Byte(120), Byte(-112), Byte(10), Byte(12), Byte(12), Byte(0), Byte(0), Byte(0), Byte(0), Byte(-87), Byte(-64), Byte(13), Byte(13), Byte(118), Byte(-104), Byte(-70), Byte(0), Byte(-104), Byte(-80), Byte(-36), Byte(-68), Byte(-121), Byte(-87), Byte(11), Byte(-85), Byte(-119), Byte(9), Byte(11), Byte(11), Byte(6), Byte(8), Byte(10), Byte(-102), Byte(112), Byte(-112), Byte(-70), Byte(-102), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(118), Byte(0), Byte(0), Byte(67), Byte(5), Byte(0), Byte(0), Byte(0), Byte(5), Byte(0), Byte(0), Byte(50), Byte(4), Byte(0), Byte(0), Byte(80), Byte(4), Byte(0), Byte(0), Byte(33), Byte(67), Byte(0), Byte(0), Byte(64), Byte(4), Byte(0), Byte(0), Byte(16), Byte(50), Byte(0), Byte(0), Byte(64), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(0), Byte(0), Byte(80), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(101), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(6), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(5), Byte(0), Byte(0), Byte(0), Byte(84), Byte(118), Byte(-104), Byte(120), Byte(-104), Byte(-70), Byte(-36), Byte(-68), Byte(101), Byte(-121), Byte(-87), Byte(-119), Byte(-87), Byte(-53), Byte(-19), Byte(-51), Byte(118), Byte(-104), Byte(-70), Byte(-102), Byte(-70), Byte(-36), Byte(-2), Byte(-34), Byte(-121), Byte(-87), Byte(-53), Byte(-85), Byte(-87), Byte(-53), Byte(-19), Byte(-51), Byte(-104), Byte(-70), Byte(-36), Byte(-68), Byte(-102), Byte(-70), Byte(-36), Byte(12), Byte(-121), Byte(-87), Byte(-53), Byte(-85), Byte(-119), Byte(-87), Byte(-53), Byte(11), Byte(118), Byte(-104), Byte(-70), Byte(10), Byte(120), Byte(-112), Byte(-70), Byte(-102), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(-121), Byte(9), Byte(-119), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(118), Byte(120), Byte(120), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(101), Byte(103), Byte(103), Byte(50), Byte(84), Byte(6), Byte(120), Byte(86), Byte(101), Byte(103), Byte(86), Byte(33), Byte(67), Byte(101), Byte(103), Byte(85), Byte(118), Byte(120), Byte(86), Byte(16), Byte(50), Byte(84), Byte(86), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(0), Byte(33), Byte(67), Byte(85), Byte(118), Byte(-104), Byte(-102), Byte(112), Byte(0), Byte(33), Byte(67), Byte(5), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(0), Byte(16), Byte(50), Byte(84), Byte(118), Byte(-104), Byte(-112), Byte(120)])}), Compound({'BlockStates': LongArray([Long(0), Long(0), Long(36028797018963968), Long(0), Long(0), Long(70368744177664), Long(103079215104), Long(144115188075855872), Long(0), Long(5629499534213120), Long(360287970500018406), Long(438705374625792), Long(468382435785048064), Long(288230376151712000), Long(377487374), Long(294092517146624), Long(7890112620789760), Long(264586478108016648), Long(372736), Long(5510711787520), Long(0), Long(0), Long(0), Long(0), Long(32768), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(5120), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(5), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(2147483648), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(2097152), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0), Long(0)]), 'Palette': List[Compound]([Compound({'Name': String('minecraft:air')}), Compound({'Properties': Compound({'age': String('0')}), 'Name': String('minecraft:sugar_cane')}), Compound({'Name': String('minecraft:torch')}), Compound({'Properties': Compound({'half': String('bottom'), 'waterlogged': String('false'), 'shape': String('straight'), 'facing': String('south')}), 'Name': String('minecraft:cobblestone_stairs')}), Compound({'Properties': Compound({'half': String('bottom'), 'waterlogged': String('false'), 'shape': String('straight'), 'facing': String('north')}), 'Name': String('minecraft:cobblestone_stairs')}), Compound({'Properties': Compound({'east': String('none'), 'waterlogged': String('false'), 'south': String('none'), 'north': String('none'), 'west': String('none'), 'up': String('true')}), 'Name': String('minecraft:cobblestone_wall')}), Compound({'Properties': Compound({'age': String('2')}), 'Name': String('minecraft:wheat')}), Compound({'Properties': Compound({'age': String('7')}), 'Name': String('minecraft:wheat')}), Compound({'Properties': Compound({'age': String('0')}), 'Name': String('minecraft:pumpkin_stem')}), Compound({'Name': String('minecraft:pumpkin')}), Compound({'Properties': Compound({'age': String('2')}), 'Name': String('minecraft:sugar_cane')}), Compound({'Properties': Compound({'age': String('5')}), 'Name': String('minecraft:wheat')}), Compound({'Properties': Compound({'age': String('0')}), 'Name': String('minecraft:potatoes')}), Compound({'Properties': Compound({'age': String('1')}), 'Name': String('minecraft:wheat')}), Compound({'Properties': Compound({'age': String('3')}), 'Name': String('minecraft:wheat')}), Compound({'Properties': Compound({'age': String('6')}), 'Name': String('minecraft:wheat')}), Compound({'Properties': Compound({'age': String('1')}), 'Name': String('minecraft:pumpkin_stem')})]), 'SkyLight': ByteArray([Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(15), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(15), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1)]), 'Y': Byte(4), 'BlockLight': ByteArray([Byte(101), Byte(-121), Byte(-87), Byte(-119), Byte(-121), Byte(-87), Byte(-53), Byte(-85), Byte(118), Byte(-104), Byte(-70), Byte(-102), Byte(-104), Byte(-70), Byte(-36), Byte(-68), Byte(-121), Byte(-87), Byte(-53), Byte(-85), Byte(-87), Byte(-53), Byte(-19), Byte(-51), Byte(-104), Byte(-70), Byte(-36), Byte(-68), Byte(-102), Byte(-70), Byte(-36), Byte(-68), Byte(-87), Byte(-53), Byte(-19), Byte(-51), Byte(-85), Byte(-87), Byte(-53), Byte(-85), Byte(-104), Byte(-70), Byte(-36), Byte(-68), Byte(-102), Byte(-104), Byte(-70), Byte(-102), Byte(-121), Byte(-87), Byte(-53), Byte(-85), Byte(-119), Byte(-121), Byte(-87), Byte(-119), Byte(118), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(120), Byte(8), Byte(120), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(103), Byte(103), Byte(103), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(102), Byte(103), Byte(86), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(118), Byte(120), Byte(86), Byte(50), Byte(84), Byte(118), Byte(120), Byte(102), Byte(-121), Byte(-119), Byte(103), Byte(33), Byte(67), Byte(101), Byte(103), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(17), Byte(50), Byte(84), Byte(102), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(16), Byte(50), Byte(84), Byte(6), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(0), Byte(33), Byte(67), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(84), Byte(118), Byte(-104), Byte(120), Byte(118), Byte(-104), Byte(-70), Byte(-102), Byte(101), Byte(-121), Byte(-87), Byte(-119), Byte(-121), Byte(-87), Byte(-53), Byte(-85), Byte(118), Byte(-104), Byte(-70), Byte(-102), Byte(-104), Byte(-70), Byte(-36), Byte(-68), Byte(-121), Byte(-87), Byte(-53), Byte(-85), Byte(-119), Byte(-87), Byte(-53), Byte(-85), Byte(-104), Byte(-70), Byte(-36), Byte(-68), Byte(-102), Byte(-104), Byte(-70), Byte(-102), Byte(-121), Byte(-87), Byte(-53), Byte(-85), Byte(-119), Byte(-121), Byte(-87), Byte(-119), Byte(118), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(120), Byte(-104), Byte(120), Byte(-121), Byte(-87), Byte(-53), Byte(-51), Byte(-85), Byte(-119), Byte(-121), Byte(103), Byte(118), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(120), Byte(119), Byte(86), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(119), Byte(120), Byte(86), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(-121), Byte(-119), Byte(103), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(119), Byte(-104), Byte(-102), Byte(120), Byte(50), Byte(84), Byte(118), Byte(120), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(34), Byte(67), Byte(101), Byte(119), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(33), Byte(67), Byte(101), Byte(-121), Byte(-87), Byte(-53), Byte(-51), Byte(-85), Byte(16), Byte(50), Byte(84), Byte(118), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(67), Byte(101), Byte(-121), Byte(103), Byte(101), Byte(-121), Byte(-87), Byte(-119), Byte(84), Byte(118), Byte(-104), Byte(120), Byte(118), Byte(-104), Byte(-70), Byte(-102), Byte(101), Byte(-121), Byte(-87), Byte(-119), Byte(-121), Byte(-87), Byte(-53), Byte(-85), Byte(118), Byte(-104), Byte(-70), Byte(-102), Byte(120), Byte(-104), Byte(-70), Byte(-102), Byte(-121), Byte(-87), Byte(-53), Byte(-85), Byte(-119), Byte(-121), Byte(-87), Byte(-119), Byte(118), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(120), Byte(-104), Byte(120), Byte(-121), Byte(-87), Byte(-53), Byte(-51), Byte(-85), Byte(-119), Byte(-121), Byte(103), Byte(-104), Byte(-70), Byte(-36), Byte(-34), Byte(-68), Byte(-102), Byte(120), Byte(86), Byte(-121), Byte(-87), Byte(-53), Byte(-51), Byte(-85), Byte(-119), Byte(120), Byte(86), Byte(118), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(-120), Byte(-119), Byte(103), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(-104), Byte(-102), Byte(120), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(-120), Byte(-87), Byte(-85), Byte(-119), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(50), Byte(84), Byte(118), Byte(-120), Byte(-87), Byte(-53), Byte(-51), Byte(-85), Byte(50), Byte(84), Byte(118), Byte(-104), Byte(-70), Byte(-36), Byte(-34), Byte(-68), Byte(33), Byte(67), Byte(101), Byte(-121), Byte(-87), Byte(-53), Byte(-51), Byte(-85), Byte(50), Byte(84), Byte(118), Byte(86), Byte(84), Byte(118), Byte(-104), Byte(120), Byte(67), Byte(101), Byte(-121), Byte(103), Byte(101), Byte(-121), Byte(-87), Byte(-119), Byte(84), Byte(118), Byte(-104), Byte(120), Byte(118), Byte(-104), Byte(-70), Byte(-102), Byte(101), Byte(-121), Byte(-87), Byte(-119), Byte(103), Byte(-121), Byte(-87), Byte(-119), Byte(118), Byte(-104), Byte(-70), Byte(-102), Byte(120), Byte(118), Byte(-104), Byte(120), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(103), Byte(-121), Byte(103), Byte(118), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(120), Byte(118), Byte(86), Byte(-121), Byte(-87), Byte(-53), Byte(-51), Byte(-85), Byte(-119), Byte(103), Byte(69), Byte(118), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(120), Byte(103), Byte(69), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(119), Byte(120), Byte(86), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(-121), Byte(-119), Byte(103), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(119), Byte(-104), Byte(-102), Byte(120), Byte(50), Byte(84), Byte(118), Byte(120), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(33), Byte(67), Byte(101), Byte(119), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(33), Byte(67), Byte(101), Byte(-121), Byte(-87), Byte(-53), Byte(-51), Byte(-85), Byte(16), Byte(50), Byte(84), Byte(118), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(33), Byte(67), Byte(101), Byte(69), Byte(67), Byte(101), Byte(-121), Byte(103), Byte(50), Byte(84), Byte(118), Byte(86), Byte(84), Byte(118), Byte(-104), Byte(120), Byte(67), Byte(101), Byte(-121), Byte(103), Byte(101), Byte(-121), Byte(-87), Byte(-119), Byte(84), Byte(118), Byte(-104), Byte(120), Byte(86), Byte(118), Byte(-104), Byte(120), Byte(101), Byte(-121), Byte(-87), Byte(-119), Byte(103), Byte(101), Byte(-121), Byte(103), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(86), Byte(118), Byte(86), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(103), Byte(101), Byte(69), Byte(118), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(120), Byte(86), Byte(52), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(103), Byte(86), Byte(52), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(102), Byte(103), Byte(69), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(118), Byte(120), Byte(86), Byte(50), Byte(84), Byte(118), Byte(120), Byte(102), Byte(-121), Byte(-119), Byte(103), Byte(33), Byte(67), Byte(101), Byte(103), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(16), Byte(50), Byte(84), Byte(102), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(16), Byte(50), Byte(84), Byte(118), Byte(-104), Byte(-70), Byte(-68), Byte(-102), Byte(0), Byte(33), Byte(67), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(16), Byte(50), Byte(84), Byte(52), Byte(50), Byte(84), Byte(118), Byte(86), Byte(33), Byte(67), Byte(101), Byte(69), Byte(67), Byte(101), Byte(-121), Byte(103), Byte(50), Byte(84), Byte(118), Byte(86), Byte(84), Byte(118), Byte(-104), Byte(120), Byte(67), Byte(101), Byte(-121), Byte(103), Byte(69), Byte(101), Byte(-121), Byte(103), Byte(84), Byte(118), Byte(-104), Byte(120), Byte(86), Byte(84), Byte(118), Byte(86), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(69), Byte(101), Byte(69), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(86), Byte(84), Byte(52), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(103), Byte(69), Byte(35), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(86), Byte(69), Byte(35), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(85), Byte(86), Byte(52), Byte(50), Byte(84), Byte(118), Byte(120), Byte(86), Byte(101), Byte(103), Byte(69), Byte(33), Byte(67), Byte(101), Byte(103), Byte(85), Byte(118), Byte(120), Byte(86), Byte(16), Byte(50), Byte(84), Byte(86), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(0), Byte(33), Byte(67), Byte(85), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(0), Byte(33), Byte(67), Byte(101), Byte(-121), Byte(-87), Byte(-85), Byte(-119), Byte(0), Byte(16), Byte(50), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(0), Byte(33), Byte(67), Byte(35), Byte(33), Byte(67), Byte(101), Byte(69), Byte(16), Byte(50), Byte(84), Byte(52), Byte(50), Byte(84), Byte(118), Byte(86), Byte(33), Byte(67), Byte(101), Byte(69), Byte(67), Byte(101), Byte(-121), Byte(103), Byte(50), Byte(84), Byte(118), Byte(86), Byte(52), Byte(84), Byte(118), Byte(86), Byte(67), Byte(101), Byte(-121), Byte(103), Byte(69), Byte(67), Byte(101), Byte(69), Byte(50), Byte(84), Byte(118), Byte(120), Byte(86), Byte(52), Byte(84), Byte(52), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(69), Byte(67), Byte(35), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(86), Byte(52), Byte(18), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(69), Byte(52), Byte(18), Byte(50), Byte(84), Byte(118), Byte(120), Byte(86), Byte(68), Byte(69), Byte(35), Byte(33), Byte(67), Byte(101), Byte(103), Byte(69), Byte(84), Byte(86), Byte(52), Byte(16), Byte(50), Byte(84), Byte(86), Byte(68), Byte(101), Byte(103), Byte(69), Byte(0), Byte(33), Byte(67), Byte(69), Byte(84), Byte(118), Byte(120), Byte(86), Byte(0), Byte(16), Byte(50), Byte(68), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(0), Byte(16), Byte(50), Byte(84), Byte(118), Byte(-104), Byte(-102), Byte(120), Byte(0), Byte(0), Byte(33), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(0), Byte(16), Byte(50), Byte(18), Byte(16), Byte(50), Byte(84), Byte(52), Byte(0), Byte(33), Byte(67), Byte(35), Byte(33), Byte(67), Byte(101), Byte(69), Byte(16), Byte(50), Byte(84), Byte(52), Byte(50), Byte(84), Byte(118), Byte(86), Byte(33), Byte(67), Byte(101), Byte(69), Byte(35), Byte(67), Byte(101), Byte(69), Byte(50), Byte(84), Byte(118), Byte(86), Byte(52), Byte(50), Byte(84), Byte(52), Byte(33), Byte(67), Byte(101), Byte(103), Byte(69), Byte(35), Byte(67), Byte(35), Byte(50), Byte(84), Byte(118), Byte(120), Byte(86), Byte(52), Byte(50), Byte(18), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(69), Byte(35), Byte(1), Byte(50), Byte(84), Byte(118), Byte(120), Byte(86), Byte(52), Byte(35), Byte(1), Byte(33), Byte(67), Byte(101), Byte(103), Byte(69), Byte(51), Byte(52), Byte(18), Byte(16), Byte(50), Byte(84), Byte(86), Byte(52), Byte(67), Byte(69), Byte(35), Byte(0), Byte(33), Byte(67), Byte(69), Byte(51), Byte(84), Byte(86), Byte(52), Byte(0), Byte(16), Byte(50), Byte(52), Byte(67), Byte(101), Byte(103), Byte(69), Byte(0), Byte(0), Byte(33), Byte(51), Byte(84), Byte(118), Byte(120), Byte(86), Byte(0), Byte(0), Byte(33), Byte(67), Byte(101), Byte(-121), Byte(-119), Byte(103), Byte(0), Byte(0), Byte(16), Byte(50), Byte(84), Byte(118), Byte(120), Byte(86), Byte(0), Byte(0), Byte(33), Byte(1), Byte(0), Byte(33), Byte(67), Byte(35), Byte(0), Byte(16), Byte(50), Byte(18), Byte(16), Byte(50), Byte(84), Byte(52), Byte(0), Byte(33), Byte(67), Byte(35), Byte(33), Byte(67), Byte(101), Byte(69), Byte(16), Byte(50), Byte(84), Byte(52), Byte(18), Byte(50), Byte(84), Byte(52), Byte(33), Byte(67), Byte(101), Byte(69), Byte(35), Byte(33), Byte(67), Byte(35), Byte(16), Byte(50), Byte(84), Byte(86), Byte(52), Byte(18), Byte(50), Byte(18), Byte(33), Byte(67), Byte(101), Byte(103), Byte(69), Byte(35), Byte(33), Byte(1), Byte(50), Byte(84), Byte(118), Byte(120), Byte(86), Byte(52), Byte(18), Byte(0), Byte(33), Byte(67), Byte(101), Byte(103), Byte(69), Byte(35), Byte(18), Byte(0), Byte(16), Byte(50), Byte(84), Byte(86), Byte(52), Byte(34), Byte(35), Byte(1), Byte(0), Byte(33), Byte(67), Byte(69), Byte(35), Byte(50), Byte(52), Byte(18), Byte(0), Byte(16), Byte(50), Byte(52), Byte(34), Byte(67), Byte(69), Byte(35), Byte(0), Byte(0), Byte(33), Byte(35), Byte(50), Byte(84), Byte(86), Byte(52), Byte(0), Byte(0), Byte(16), Byte(34), Byte(67), Byte(101), Byte(103), Byte(69), Byte(0), Byte(0), Byte(16), Byte(50), Byte(84), Byte(118), Byte(120), Byte(86), Byte(0), Byte(0), Byte(0), Byte(33), Byte(67), Byte(101), Byte(103), Byte(69), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(16), Byte(50), Byte(18), Byte(0), Byte(0), Byte(33), Byte(1), Byte(0), Byte(33), Byte(67), Byte(35), Byte(0), Byte(16), Byte(50), Byte(18), Byte(16), Byte(50), Byte(84), Byte(52), Byte(0), Byte(33), Byte(67), Byte(35), Byte(1), Byte(33), Byte(67), Byte(35), Byte(16), Byte(50), Byte(84), Byte(52), Byte(18), Byte(16), Byte(50), Byte(18), Byte(0), Byte(33), Byte(67), Byte(69), Byte(35), Byte(1), Byte(33), Byte(1), Byte(16), Byte(50), Byte(84), Byte(86), Byte(52), Byte(18), Byte(16), Byte(0), Byte(33), Byte(67), Byte(101), Byte(103), Byte(69), Byte(35), Byte(1), Byte(0), Byte(16), Byte(50), Byte(84), Byte(86), Byte(52), Byte(18), Byte(1), Byte(0), Byte(0), Byte(33), Byte(67), Byte(69), Byte(35), Byte(17), Byte(18), Byte(0), Byte(0), Byte(16), Byte(50), Byte(52), Byte(18), Byte(33), Byte(35), Byte(1), Byte(0), Byte(0), Byte(33), Byte(35), Byte(17), Byte(50), Byte(52), Byte(18), Byte(0), Byte(0), Byte(16), Byte(18), Byte(33), Byte(67), Byte(69), Byte(35), Byte(0), Byte(0), Byte(0), Byte(17), Byte(50), Byte(84), Byte(86), Byte(52), Byte(0), Byte(0), Byte(0), Byte(33), Byte(67), Byte(101), Byte(103), Byte(69), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(84), Byte(86), Byte(52), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(1), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(16), Byte(50), Byte(18), Byte(0), Byte(0), Byte(33), Byte(1), Byte(0), Byte(33), Byte(67), Byte(35), Byte(0), Byte(16), Byte(50), Byte(18), Byte(0), Byte(16), Byte(50), Byte(18), Byte(0), Byte(33), Byte(67), Byte(35), Byte(1), Byte(0), Byte(33), Byte(1), Byte(0), Byte(16), Byte(50), Byte(52), Byte(18), Byte(0), Byte(16), Byte(0), Byte(0), Byte(33), Byte(67), Byte(69), Byte(35), Byte(1), Byte(0), Byte(0), Byte(16), Byte(50), Byte(84), Byte(86), Byte(52), Byte(18), Byte(0), Byte(0), Byte(0), Byte(33), Byte(67), Byte(69), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(52), Byte(18), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(33), Byte(35), Byte(1), Byte(16), Byte(18), Byte(0), Byte(0), Byte(0), Byte(16), Byte(18), Byte(0), Byte(33), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(1), Byte(16), Byte(50), Byte(52), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(67), Byte(69), Byte(35), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(84), Byte(86), Byte(52), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(67), Byte(69), Byte(35), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(1), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(16), Byte(50), Byte(18), Byte(0), Byte(0), Byte(33), Byte(1), Byte(0), Byte(0), Byte(33), Byte(1), Byte(0), Byte(16), Byte(50), Byte(18), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(33), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(52), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(67), Byte(69), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(52), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(18), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(16), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(52), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(67), Byte(69), Byte(35), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(52), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(1), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(33), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(52), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(50), Byte(52), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(33), Byte(35), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(16), Byte(18), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(1), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0), Byte(0)])}), Compound({'SkyLight': ByteArray([Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1), Byte(-1)]), 'Y': Byte(5)})]), 'PostProcessing': List[List]([List([]), List([]), List([]), List([]), List([]), List([]), List([]), List([]), List([]), List([]), List([]), List([]), List([]), List([]), List([]), List([])]), 'Structures': Compound({'Starts': Compound({'shipwreck': Compound({'id': String('INVALID')}), 'buried_treasure': Compound({'id': String('INVALID')}), 'mineshaft': Compound({'id': String('INVALID')}), 'stronghold': Compound({'id': String('INVALID')}), 'ruined_portal': Compound({'id': String('INVALID')})}), 'References': Compound({'nether_fossil': LongArray([]), 'jungle_pyramid': LongArray([]), 'monument': LongArray([]), 'desert_pyramid': LongArray([]), 'mineshaft': LongArray([]), 'ocean_ruin': LongArray([]), 'bastion_remnant': LongArray([]), 'shipwreck': LongArray([]), 'fortress': LongArray([]), 'buried_treasure': LongArray([]), 'pillager_outpost': LongArray([]), 'swamp_hut': LongArray([]), 'igloo': LongArray([]), 'endcity': LongArray([]), 'village': LongArray([Long(0)]), 'stronghold': LongArray([]), 'mansion': LongArray([]), 'ruined_portal': LongArray([])})}), 'LiquidTicks': List([])}), 'DataVersion': Int(2584)}>
